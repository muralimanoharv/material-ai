# .github/workflows/ci.yml

name: Lint, Test, and Report

on:
  pull_request:
    branches: [ main ]

# Add permissions for the actions to write PR comments and checks
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies with uv
        run: |
          pip install uv
          uv pip install --system .[dev]

      - name: Check Code Formatting
        run: black --check .

      - name: Run tests and generate reports
        env:
          CONFIG_PATH: config.ini
        id: run-tests # Give the step an ID to reference its output later
        run: |
          # Generate JUnit XML for test results and a text summary for coverage
          # The 'tee' command outputs to the console and saves to a file
          pytest --cov=./ \
                 --cov-report=term \
                 --cov-report=xml \
                 --cov-fail-under=90 \
                 --junitxml=pytest.xml | tee coverage-summary.txt
        # 'continue-on-error' allows subsequent steps to run even if tests fail,
        # so the report is always published. The job will still fail in the end.
        continue-on-error: true

      - name: Post Test Summary
        uses: dorny/test-reporter@v1
        if: success() || failure() # Always run this step to post results
        with:
          name: ðŸ§ª Unit Test Results
          path: pytest.xml
          reporter: jest-junit
          # This ensures the overall job status reflects the test outcome
          fail-on-error: true

      - name: Post Coverage Summary as a PR Comment
        uses: actions/github-script@v7
        if: always() # Always run
        with:
          script: |
            const fs = require('fs');
            // Read the text summary file generated in the test step
            const coverageSummary = fs.readFileSync('coverage-summary.txt', 'utf8');

            const body = `### ðŸ“Š Code Coverage Summary\n\n\`\`\`\n${coverageSummary}\n\`\`\``;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });